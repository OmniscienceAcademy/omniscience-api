"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 3.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from pathlib import Path

import django_heroku

from api.specs import USE_POSTGRES_SWIPESESSIONS

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# The environment variable IS_PROD is set to "yes" only on aws.omniscienceapiprod.com
IS_PROD = os.environ.get("IS_PROD", False) == "yes"  # AWS
# IS_PROD = "djrestapi_dev" not in str(BASE_DIR)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = not IS_PROD
print("DEBUG:", DEBUG)
print("IS_PROD:", IS_PROD)


ALLOWED_HOSTS = [
    "176.58.120.127",
    "127.0.0.1",
    "localhost",
    "www.omniscienceapi.com",
    "www.omniscienceapidev.com",
    "omniscience.academy",
    "front-git-dev-omniscienceacademy.vercel.app",
    "front-git-staging-omniscienceacademy.vercel.app",
    "front-git-new-result-page-omniscienceacademy.vercel.app",
    "front-git-test-omniscienceacademy.vercel.app",
    "omniscienceapi.herokuapp.com",
    "omniscienceapi-env.eba-tfawcay9.eu-west-3.elasticbeanstalk.com",
    "omniscienceapi-env-dev.eba-tfawcay9.eu-west-3.elasticbeanstalk.com",
    "aws.omniscienceapidev.com",
]

SECRET_KEY = os.environ.get("SECRET_KEY")

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "api",
    "rest_framework",
    "corsheaders",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ]
        },
    }
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# connect to our Postgres database

DB_sqlite = {"ENGINE": "django.db.backends.sqlite3", "NAME": BASE_DIR / "db.sqlite3"}


PG_DATABASE_DEV = "djrestapi_dev_pgdb"
PG_DATABASE_PROD = "djrestapi_prod_pgdb"

db_postgres = {
    "ENGINE": "django.db.backends.postgresql_psycopg2",
    "NAME": PG_DATABASE_PROD if IS_PROD else PG_DATABASE_DEV,
    "USER": os.environ["PG_USER"],
    "PASSWORD": os.environ["PG_PASSWORD"],
    "HOST": os.environ["PG_HOST"],
    "PORT": os.environ["PG_PORT"],
}

DATABASES = {"default": db_postgres if USE_POSTGRES_SWIPESESSIONS else DB_sqlite}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": (
            "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
        )
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATIC_URL = "/static/"

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


REST_FRAMEWORK = {
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10,
}


SESSION_EXPIRE_AT_BROWSER_CLOSE = True

# CORS_ALLOW_ALL_ORIGINS = True

CORS_ALLOWED_ORIGINS = [
    "https://front-git-new-result-page-omniscienceacademy.vercel.app",
    "http://176.58.120.127",
    "http://127.0.0.1",
    "http://80.215.202.61",
    "http://172.20.10.2",
    "http://localhost:3000",
    "https://www.omniscienceapi.com",
    "http://127.0.0.1:3000",
    # List of all commit
    "https://omniscience.academy",
    "https://front-git-dev-omniscienceacademy.vercel.app",
    "https://front-git-staging-omniscienceacademy.vercel.app",
    "https://front-git-new-result-page-omniscienceacademy.vercel.app",
    "https://front-git-test-omniscienceacademy.vercel.app",
    "https://omniscienceapi.herokuapp.com",
    "http://omniscienceapi-env.eba-tfawcay9.eu-west-3.elasticbeanstalk.com",
    "http://omniscienceapi-env-dev.eba-tfawcay9.eu-west-3.elasticbeanstalk.com",
    "http://aws.omniscienceapidev.com",
]

CORS_ALLOW_CREDENTIALS = True

# https://docs.djangoproject.com/fr/3.2/ref/settings/#csrf-cookie-samesite
SESSION_COOKIE_SAMESITE = "None"
# SESSION_COOKIE_SECURE = True


# TODO
# SECURE_SSL_REDIRECT = True
# SECURE_HSTS_SECONDS = 31536000
# SECURE_CONTENT_TYPE_NOSNIFF = True


django_heroku.settings(locals())

TEST_RUNNER = "snapshottest.django.TestRunner"


COMPUTE_COVERAGE = False
if COMPUTE_COVERAGE:
    INSTALLED_APPS.append("django_nose")

    # Use nose to run all tests
    TEST_RUNNER = "django_nose.NoseTestSuiteRunner"

    # Tell nose to measure coverage on the 'foo' and 'bar' apps
    NOSE_ARGS = ["--with-coverage", "--cover-package=api"]
